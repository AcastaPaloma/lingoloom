from flask import Flask, render_template, request, session, redirect
from werkzeug.utils import secure_filename
import sqlite3
import os
import uuid
import random

from deepgram import Deepgram
from dotenv import load_dotenv
import os
import asyncio
from aiohttp import web
from aiohttp_wsgi import WSGIHandler

from typing import Dict, Callable


async def process_audio(fast_socket: web.WebSocketResponse):
    async def get_transcript(data: Dict) -> None:
        if 'channel' in data:
            transcript = data['channel']['alternatives'][0]['transcript']
        
            if transcript:
                await fast_socket.send_str(transcript)

    deepgram_socket = await connect_to_deepgram(get_transcript)

    return deepgram_socket
async def connect_to_deepgram(transcript_received_handler: Callable[[Dict], None]) -> str:
    try:
        socket = await dg_client.transcription.live({'punctuate': False, 'interim_results': False, 'language': 'de', 'model': 'nova-2'})
        socket.registerHandler(socket.event.CLOSE, lambda c: print(f'Connection closed with code {c}.'))
        socket.registerHandler(socket.event.TRANSCRIPT_RECEIVED, transcript_received_handler)

        return socket
    except Exception as e:
        raise Exception(f'Could not open socket: {e}')
async def socket(request):
    ws = web.WebSocketResponse()
    await ws.prepare(request) 

    deepgram_socket = await process_audio(ws)

    while True:
        data = await ws.receive_bytes()
        deepgram_socket.send(data)

@app.route('/temp_exercise',  methods=["POST", "GET"])
def index():
    chatgpt_return = '''
    In einem kleinen Dorf am Rande des Waldes lebte ein alter Holzschnitzer namens Friedrich. Jeden Morgen öffnete 
    er sein Fenster und ließ die frische Waldluft hereinströmen, während er an seinen neuesten Holzkreationen arbeitete. 
    Die Dorfbewohner schätzten seine Kunstfertigkeit und bewunderten die filigranen Schnitzereien, die er mit liebevoller Hingabe schuf.
    '''
    return render_template('index.html', chatgpt_return=chatgpt_return)

    
if __name__ == "__main__":
    app.config['TEMPLATES_AUTO_RELOAD'] = True
    loop = asyncio.get_event_loop()
    aio_app = web.Application()
    wsgi = WSGIHandler(app)
    aio_app.router.add_route('*', '/{path_info: *}', wsgi.handle_request)
    aio_app.router.add_route('GET', '/listen', socket)
    web.run_app(aio_app, port=5555, host='localhost')